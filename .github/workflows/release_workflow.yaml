name: Release Flow

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Installer
        run: .\buildInstaller.bat  # Path to your Windows batch script in the repository root

      - name: Read changelog
        id: read_changelog
        run: |
          echo ::set-output name=CHANGELOG::$(cat changelog.md)

      - name: Fetch previous release info
        id: get_previous_release
        run: |
          LATEST_TAG=$(git describe --abbrev=0 --tags)
          PREVIOUS_RELEASE_INFO=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/${LATEST_TAG}")
          echo ::set-output name=PREVIOUS_CHANGELOG::$(echo "$PREVIOUS_RELEASE_INFO" | jq -r ".body")

      - name: Compare changelogs
        run: |
          if [ "${{ steps.read_changelog.outputs.CHANGELOG }}" = "${{ steps.get_previous_release.outputs.PREVIOUS_CHANGELOG }}" ]; then
            echo "Changelog is identical to the previous release."
            exit 1
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}  # Use the tag name from the event
          release_name: Release ${{ github.ref }}  # Use the tag name for the release name
          body: ${{steps.read_changelog.outputs.CHANGELOG }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .\ValRestServerStandAlone\ValCompanionSetup\bin\Release  
          asset_name: ValCompanionSetup.msi 
          asset_content_type: application/x-msi

